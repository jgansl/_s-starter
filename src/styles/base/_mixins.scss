// Grid breakpoints
//
// Define the minimum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.
$grid-breakpoints: (
  xs: 391px,
  sm: 577px,
  md: 769px,
  lg: 993px,
  xl: 1100px,
  //TODO subs-text-cards-grid
  2xl: 1300px,
  3xl: 1500px,
);

@mixin hide-sb() {
  /* Hide scrollbar for IE, Edge and Firefox */
  -ms-overflow-style: none;  /* IE and Edge */
  scrollbar-width: none;  /* Firefox */
  /* Hide scrollbar for Chrome, Safari and Opera */
  &::-webkit-scrollbar {
    display: none;
  }
}
@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($grid-breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($grid-breakpoints, $breakpoint);
    // Write the media query.
    @media (min-width: ($breakpoint-value)) {
      @content;
    }
    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}
@mixin respond-below($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($grid-breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($grid-breakpoints, $breakpoint);
    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

@mixin fillall() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
.fillall {
  @include fillall;
}
@mixin inner-wrap($max-width: 1535px) {
  max-width: $max-width;
  margin: 0 auto;
  width: 100%;
}
.inner-wrap {
  @include inner-wrap();
}
.inner-wrap-x { //TODO
  @include inner-wrap(1336px);
}

@mixin main {
  width: 100%;
  margin: 0 auto;
  padding: 0 min(192px, max(1.875rem, 9.375%));
  position: relative;
  @media (max-width: 992px) {
    padding: 0 max(1.875rem, 4vw);
  }
}
.main {
  @include main;
}

@mixin main-content-wrap {
  position: relative;
  flex-grow: 1;
  background-color: #fff;
}
.main-content-wrap {
  @include main-content-wrap;
}

@mixin section-full {
  margin-left: calc(-100vw / 2 + 100% / 2);
  margin-right: calc(-100vw / 2 + 100% / 2);
  max-width: 100vw;
  // width: 100vw;
}
.section-full {
  @include section-full;
}

@mixin bgrel() {
  position: relative;
  z-index: 1;
  &::before {
    z-index: -1;
  }
}
.bg-rel {
  @include bgrel;
}
@mixin rel() {
  position: relative;
  z-index: 1;
  // &:after,
  &:before {
    content: '';
    z-index: -1;
  }
}
.rel {
  @include rel;
}

@mixin bg($size: cover, $position: center, $repeat: no-repeat) {
  background-position: $position;
  background-repeat: $repeat;
  background-size: $size;
}
@mixin cover() {
  @include fillall();
  @include section-full();
  width: 100vw;
  z-index: -1;
}
.cover {
  @include cover;
}
// @mixin bg-cover($position: center, $size: cover, $repeat: no-repeat, $idx: -1) {
//   @include bg($position, $repeat, $size);
//   // @include fillall();
//   // @include section-full();
//   width: 100vw;
//   @include cover();
//   // z-index: $idx;
// }
// .bg-full,
// .bg-cover {
//   @include bg-cover();
// }

/**
 * Clickables
 */
@mixin btn-common() {
  @include bdy(700);
  font-family: $font-heading;

  // padding: 0.45em 0.9em;
  padding: 0.65em 0.9em 0.25em;
  border-radius: 0.75em;//1rem; //2em; //20px
  text-decoration: none;
  text-align: center;
  // display: inline-flex;
}
@mixin btn() {
  @include btn-common();
  border: 0;
  background-color: var(--page-color);
}
// .btn { @include btn; }
*:not(.is-style-outline) > .wp-block-button__link {
  @include btn;
}
@mixin btn-outlined() {
  @include btn-common();
  background-color: transparent !important;
  color: var(--page-color);
  // border: 3px solid var(--page-color);
  border: 0.185em solid var(--page-color);
  &:hover {
    color: var(--page-color);
  }
}
.btn-white {
  @include btn;
  background: #fff;
  color: var(--page-color);
  // }
  // .btn-white {
  @include btn-common;
  border: none;
  // align-items: center; //TODO
  line-height: 1;
  background-color: #fff;
  color: var(--page-color);
}
*.is-style-outline > .wp-block-button__link,
.btn-outlined {
  @include btn-outlined;
  &.light {
    color: #fff;
    border-color: #fff; //! blue-section
  }
  transition: 0.2s;
  transition-delay: 0.05s;
  &:hover {
    background-color: var(--page-color)!important;
    color: #fff;
  }
}
.section-colored {//TODO
  *:not([class*=card]) > .btn-outlined { 
    border-color: #fff;
    color: #fff;
  }
}

//.header-links
li.btn > *,//.header-link, //navbar
*:not(li).btn,
input[type=submit] {
  @include btn;
}
// li.btn *,//.header-link,
// input[type=submit] * {
// 	// padding: 13px 34px;// 14px;
// 	line-height: 1;
// }
// .header-links li.btn.outlined > *, //navbar
// *:not(li).btn.outlined {
// 	background: transparent;
// 	border: 2px solid $blue;
// 	color: $blue;
// 	font-weight: 600;
// }
// .header-links li.btn:not(.outlined) svg {
// 	background:#FFF; fill: $blue;
// }
// .header-links li.btn.outlined svg {
// 	background-color: $blue;
// 	width:  0.9rem;
// 	height: 0.9rem;
// 	z-index: 10;
// 	// opacity: 1!important;
// 	// transform: unset!important;
// }
// .header-links li.btn svg {
// 	position: absolute;
// 	right: 0.5em;
// }

// @mixin clamp(
//   $property,
//   $min-size,
//   $scaler,
//   $max-size,
//   $min-size-left: false,
//   $scaler-left: false,
//   $max-size-left: false
// ) {
//   @if $min-size-left == false {
//     #{$property}: $max-size;
//     #{$property}: #{'min(max(#{$min-size}, #{$scaler}), #{$max-size})'};
//     #{$property}: clamp($min-size, $scaler, $max-size);
//   } @else if $min-size-left == 0 or $min-size-left == auto {
//     #{$property}: $max-size $min-size-left;
//     #{$property}: #{'min(max(#{$min-size}, #{$scaler}), #{$max-size})'}
//       $min-size-left;
//     #{$property}: clamp($min-size, $scaler, $max-size) $min-size-left;
//   } @else {
//     #{$property}: $max-size $min-size-left;
//     #{$property}: #{'min(max(#{$min-size}, #{$scaler}), #{$max-size})'}
//       #{'min(max(#{$min-size-left}, #{$scaler-left}), #{$max-size-left})'};
//     #{$property}: clamp($min-size, $scaler, $max-size)
//       clamp($min-size-left, $scaler-left, $max-size-left);
//   }
// }

//TODO
@function calcB($pl, $ps, $lg: 1100, $sm: 390) {
  @return calc(#{$lg} - #{$lg} * ((#{$pl} - #{$ps}) / (#{$lg} - #{$sm})));
}
@mixin prop($pl, $ps, $po: 'font-size', $lg: 1100, $sm: 390) {
  @include clamp(
    'font-size',
    //$po,
    #{$ps}px,
    //calc((( #{$pl} - #{$ps} ) * #{$lg} / (#{$lg} - #{$sm})) + calcB($pl, $ps, $lg, $sm)),
    calc(100vw * ((#{$pl} - #{$ps}) / (#{$lg} - #{$sm}))),
    //+ calcB($pl, $ps)
    #{$pl}px
  ); //rfs
}

@mixin card {
  background-color: #fff; //.home-about
  border-radius: $border-radius; //8px 8px 8px 8px;//! 20px;
  padding: 51px 66px 90px; //106-1rem
  text-align: center;
  p {
    @include bdy;
  }
  &.light {
    background-color: #f6f9fe;
  }
}
.card {
  @include card;
}

// Encode symbols
@function url-encode($string) {
  $map: (
    '%': '%25',
    '<': '%3C',
    '>': '%3E',
    ' ': '%20',
    '!': '%21',
    '*': '%2A',
    "'": '%27',
    '"': '%22',
    '(': '%28',
    ')': '%29',
    ';': '%3B',
    ':': '%3A',
    '@': '%40',
    '&': '%26',
    '=': '%3D',
    '+': '%2B',
    '$': '%24',
    ',': '%2C',
    '/': '%2F',
    '?': '%3F',
    '#': '%23',
    '[': '%5B',
    ']': '%5D',
  );

  $new: $string;

  @each $search, $replace in $map {
    $new: str-replace($new, $search, $replace);
  }

  @return $new;
}

// Format the SVG as a URL
@function inline-svg($string) {
  @return url('data:image/svg+xml,#{url-encode($string)}');
}

@mixin fs-reduce($min, $max, $vmin: 390, $vmax: 1400) {
  @include clamp(
    'font-size',
    calc(#{$min} * 1px),
    calc((#{$max} - #{$min}) * 100vw / (#{$vmax} - #{$vmin}) + 21px),
    //10vw,
    calc(#{$max} * 1px)
  );
}


// @function evalFS($fl, $fs, $sl, $sm, $pl) {
//   $eval: calc(($fl - $fs) / ($sl - $sm));
//   $b: calc(($fl * 1px) - ($eval * $pl)); //b
//   $ret: calc($eval * 100vw + $b);
//   @return clamp('font-size', $fs, $ret, $fl);
// }


/** Decorative SVG **/
@mixin svgTopLeft($edge: false) {
  @if $edge { @include section-full; }
}
@mixin svgTopRight($edge: false) {
  @if $edge { @include section-full; }
}
@mixin svgBottomLeft($edge: false) {
  @if $edge { @include section-full; }
}
@mixin svgBottomRight($edge: false) {
  @if $edge { @include section-full; }
}